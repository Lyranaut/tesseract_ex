import os
import sys
import tkinter as tk
from tkinter import filedialog
from tkinter import ttk
import pytesseract
from PIL import Image
from docx import Document
import speech_recognition as sr

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É UTF-8
sys.stdout.reconfigure(encoding="utf-8")

# –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ Tesseract (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
pytesseract.pytesseract.tesseract_cmd = r"C:\Program Files\Tesseract-OCR\tesseract.exe"

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ä–∞–±–æ—á–µ–º—É —Å—Ç–æ–ª—É –∏ Word-—Ñ–∞–π–ª—É
desktop_path = os.path.join(os.path.expanduser("~"), "Desktop")
word_filename = os.path.join(desktop_path, "recognized_text.docx")

# –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º Word-–¥–æ–∫—É–º–µ–Ω—Ç
if os.path.exists(word_filename):
    doc = Document(word_filename)  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
else:
    doc = Document()  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def process_image():
    file_path = filedialog.askopenfilename(
        title="–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
        filetypes=[("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.png;*.jpg;*.jpeg;*.bmp;*.tiff")],
    )
    if not file_path:
        print("–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        return

    try:
        img = Image.open(file_path)
        text = pytesseract.image_to_string(img)
        print("–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n", text)

        doc.add_heading("–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", level=1)
        doc.add_paragraph(text)
        doc.add_paragraph("\n" + "-" * 50 + "\n")
        doc.save(word_filename)

        print(f"–§–∞–π–ª '{word_filename}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")

    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", e)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ
def process_audio():
    file_path = filedialog.askopenfilename(
        title="–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª", filetypes=[("–ê—É–¥–∏–æ—Ñ–∞–π–ª—ã", "*.wav;*.mp3;*.flac")]
    )
    if not file_path:
        print("–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        return

    recognizer = sr.Recognizer()
    try:
        with sr.AudioFile(file_path) as source:
            audio = recognizer.record(source)
            text = recognizer.recognize_google(audio, language="ru-RU")
            print("–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –∞—É–¥–∏–æ:\n", text)

            doc.add_heading("–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –∞—É–¥–∏–æ:", level=1)
            doc.add_paragraph(text)
            doc.add_paragraph("\n" + "-" * 50 + "\n")
            doc.save(word_filename)

            print(f"–§–∞–π–ª '{word_filename}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")

    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ:", e)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞
def show_custom_dialog():
    dialog = tk.Toplevel(root)
    dialog.title("–í—ã–±–æ—Ä")
    dialog.geometry("400x200")
    dialog.resizable(False, False)

    # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
    style = ttk.Style()
    style.configure("TButton", font=("Arial", 12), padding=10)

    # –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    label = tk.Label(dialog, text="–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å?", font=("Arial", 12))
    label.pack(pady=15)

    # –ö–Ω–æ–ø–∫–∏
    btn_image = ttk.Button(dialog, text="üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", command=lambda: [dialog.destroy(), process_image()])
    btn_image.pack(pady=5, ipadx=10)

    btn_audio = ttk.Button(dialog, text="üéôÔ∏è –ê—É–¥–∏–æ", command=lambda: [dialog.destroy(), process_audio()])
    btn_audio.pack(pady=5, ipadx=10)

    btn_cancel = ttk.Button(dialog, text="‚ùå –û—Ç–º–µ–Ω–∞", command=lambda: [dialog.destroy(), root.quit()])
    btn_cancel.pack(pady=10, ipadx=10)

    dialog.transient(root)  # –û–∫–Ω–æ –ø–æ–≤–µ—Ä—Ö –æ—Å–Ω–æ–≤–Ω–æ–≥–æ
    dialog.grab_set()  # –ó–∞—Ö–≤–∞—Ç —Ñ–æ–∫—É—Å–∞

# –û—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ (—Å–∫—Ä—ã–≤–∞–µ–º —Ä–∞–º–∫—É, —á—Ç–æ–±—ã –æ–Ω–æ –Ω–µ –º–µ—à–∞–ª–æ)
root = tk.Tk()
root.overrideredirect(True)  # –°–∫—Ä—ã–≤–∞–µ–º —Ä–∞–º–∫—É
root.geometry("1x1+0+0")  # –î–µ–ª–∞–µ–º –æ–∫–Ω–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º
root.after(100, show_custom_dialog)  # –í—ã–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞

root.mainloop()  # –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª Tkinter
